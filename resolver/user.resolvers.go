package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"example/database"
	"example/model"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {


	id := primitive.NewObjectID().Hex()

	user := &model.User{
		ID: id,
		Name:     input.Name,
		Email:    input.Email,
		Password: input.Password,
	}
	userCollection := database.Users()

	_, err := userCollection.InsertOne(ctx, user)
	if err != nil {
		return nil, err
	}

	

	return user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUserInput) (*model.User, error) {


	userCollection := database.Users()

	user := &model.User{
		ID:       input.ID,
		Name:     *input.Name,
		Email:    *input.Email,
		Password: input.Password,
	}

	err := userCollection.UpdateId(ctx, input.ID, user)

	if err != nil {
		return nil, err
	}

	return user, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, input model.DeleteUserInput) (*model.User, error) {

	userCollection := database.Users()

	filter := bson.M{"_id": input.ID}

	res := &model.User{}
	userCollection.Find(ctx, filter).One(&res)


	err := userCollection.RemoveId(ctx, input.ID)
	if err != nil {
		return nil, err
	}

	return res, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {

	filter := bson.M{"_id": id}

	user := &model.User{}

	err := r.Coll("user").Find(ctx, filter).One(&user)

	if err != nil {
		return nil, err
	}

	Posts, err :=r.GetPostsAutor(ctx, user.ID)

	if err != nil {
		return nil, err
	}

	user.Posts = Posts

	return user, nil
}

// GetUsers is the resolver for the getUsers field.
func (r *queryResolver) GetUsers(ctx context.Context) ([]*model.User, error) {

	users := []*model.User{}

	err := r.Coll("user").Find(ctx, bson.M{}).All(&users)
	if err != nil {
		return nil, err
	}

	return users, nil
}

// Mutation returns generated.MutationResolver implementation.
